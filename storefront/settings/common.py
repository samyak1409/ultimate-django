"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from celery.schedules import crontab


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",  # admin interface
    "django.contrib.auth",  # authentication system
    "django.contrib.contenttypes",  # for generic relationships
    "django.contrib.sessions",  # temp memory on server to store user data
    "django.contrib.messages",  # one time notifications
    "django.contrib.staticfiles",  # like css, images, etc.
    "rest_framework",  # toolkit for building Web APIs
    "django_filters",  # easily construct complex searches and filters
    "djoser",  # REST implementation of Django authentication system
    "corsheaders",  # for handling the server headers required for CORS
    "playground",
    "store",
    "tags",
    "likes",
    "core",
]


MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",  # https://github.com/adamchainz/django-cors-headers?tab=readme-ov-file#setup
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",  # https://whitenoise.readthedocs.io/en/stable/#quickstart-for-django-apps
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]


CORS_ALLOWED_ORIGINS = ["null"]  # allow requests from local files (file://...)


ROOT_URLCONF = "storefront.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "storefront.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")


# User-uploaded files:
MEDIA_URL = "media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# DRF Settings:
REST_FRAMEWORK = {
    # In DRF, by default decimal values convert to str, change that:
    "COERCE_DECIMAL_TO_STRING": False,
    # https://www.django-rest-framework.org/api-guide/filtering/#api-guide:
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
        "rest_framework.filters.SearchFilter",
        "rest_framework.filters.OrderingFilter",
    ],
    # https://www.django-rest-framework.org/api-guide/pagination/#api-reference:
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    # https://djoser.readthedocs.io/en/latest/authentication_backends.html#json-web-token-authentication:
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
}


# Telling django to use this custom User model (defined in `core.models`, extends django's `AbstractUser`) for auth:
AUTH_USER_MODEL = "core.User"


SIMPLE_JWT = {
    # https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html:
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    # https://djoser.readthedocs.io/en/latest/authentication_backends.html#json-web-token-authentication:
    "AUTH_HEADER_TYPES": ("JWT",),
}

# https://djoser.readthedocs.io/en/latest/authentication_backends.html#json-web-token-authentication:
DJOSER = {
    "TOKEN_MODEL": None,
    "SERIALIZERS": {
        "user_create": "core.serializers.CustomUserCreateSerializer",
        "current_user": "core.serializers.CustomUserSerializer",
    },
}


# Celery:

CELERY_BEAT_SCHEDULE = {
    # Executes every Monday morning at 7:30 a.m.
    "notify-customers-every-monday-morning": {
        "task": "playground.tasks.notify_customers",
        "schedule": crontab(hour=7, minute=30, day_of_week=1),
        "args": ["Hello from beat"],
        # "kwargs": {...},
    },
}


# Logging:

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    # [Helper] How logs would look:
    "formatters": {
        "main": {
            "format": "{asctime} ({levelname}) - {name} - {message}",
            "style": "{",
        },
    },
    # [Helper] Where logs would go:
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "main"},
        "file": {
            "class": "logging.FileHandler",
            "filename": "logs.log",
            "formatter": "main",
        },
    },
    # [Main] Log which apps, with which handlers, which levels:
    "loggers": {
        "": {  # all apps
            "handlers": ["console", "file"],
            "level": os.environ.get("LOG_LEVEL", "INFO"),
        },
    },
}
